{"ast":null,"code":"import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const FETCH_COLLECTIONS_START = 'FETCH_COLLECTIONS_START';\nexport const FETCH_COLLECTIONS_SUCCESS = 'FETCH_COLLECTIONS_SUCCESS';\nexport const FETCH_COLLECTIONS_FAILURE = 'FETCH_COLLECTIONS_FAILURE';\nexport const fetchCollectionsStart = () => ({\n  type: FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\nconst initialState = {\n  collections: null,\n  isFetching: false,\n  errorMessage: undefined\n};\n\nconst shopReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_COLLECTIONS_START:\n      return { ...state,\n        isFetching: true\n      };\n\n    case FETCH_COLLECTIONS_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        collections: action.payload\n      };\n\n    case FETCH_COLLECTIONS_FAILURE:\n      return { ...state,\n        isFetching: false,\n        errorMessage: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default shopReducer;","map":{"version":3,"sources":["/Users/mike/Desktop/Coding/React2020/clothing-store/client/src/redux/shop/shop-reducer.js"],"names":["firestore","convertCollectionsSnapshotToMap","FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStart","type","fetchCollectionsSuccess","collectionsMap","payload","fetchCollectionsFailure","errorMessage","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message","initialState","collections","isFetching","undefined","shopReducer","state","action"],"mappings":"AAAA,SACEA,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AAEP,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ;AADoC,CAAP,CAA9B;AAIP,OAAO,MAAMK,uBAAuB,GAAIC,cAAD,KAAqB;AAC1DF,EAAAA,IAAI,EAAEH,yBADoD;AAE1DM,EAAAA,OAAO,EAAED;AAFiD,CAArB,CAAhC;AAKP,OAAO,MAAME,uBAAuB,GAAIC,YAAD,KAAmB;AACxDL,EAAAA,IAAI,EAAEF,yBADkD;AAExDK,EAAAA,OAAO,EAAEE;AAF+C,CAAnB,CAAhC;AAKP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC9C,SAAQC,QAAD,IAAc;AACnB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AAEAS,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMV,cAAc,GAAGP,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACN,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KALH,EAMGW,KANH,CAMUC,KAAD,IAAWP,QAAQ,CAACH,uBAAuB,CAACU,KAAK,CAACC,OAAP,CAAxB,CAN5B;AAOD,GAXD;AAYD,CAbM;AAeP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,IADM;AAEnBC,EAAAA,UAAU,EAAE,KAFO;AAGnBb,EAAAA,YAAY,EAAEc;AAHK,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACtB,IAAf;AACE,SAAKJ,uBAAL;AACE,aAAO,EAAE,GAAGyB,KAAL;AAAYH,QAAAA,UAAU,EAAE;AAAxB,OAAP;;AACF,SAAKrB,yBAAL;AACE,aAAO,EAAE,GAAGwB,KAAL;AAAYH,QAAAA,UAAU,EAAE,KAAxB;AAA+BD,QAAAA,WAAW,EAAEK,MAAM,CAACnB;AAAnD,OAAP;;AACF,SAAKL,yBAAL;AACE,aAAO,EAAE,GAAGuB,KAAL;AAAYH,QAAAA,UAAU,EAAE,KAAxB;AAA+Bb,QAAAA,YAAY,EAAEiB,MAAM,CAACnB;AAApD,OAAP;;AACF;AACE,aAAOkB,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,WAAf","sourcesContent":["import {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from '../../firebase/firebase.utils';\n\nexport const FETCH_COLLECTIONS_START = 'FETCH_COLLECTIONS_START';\nexport const FETCH_COLLECTIONS_SUCCESS = 'FETCH_COLLECTIONS_SUCCESS';\nexport const FETCH_COLLECTIONS_FAILURE = 'FETCH_COLLECTIONS_FAILURE';\n\nexport const fetchCollectionsStart = () => ({\n  type: FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\n  type: FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\n\nexport const fetchCollectionsFailure = (errorMessage) => ({\n  type: FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n\n    collectionRef\n      .get()\n      .then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n\nconst initialState = {\n  collections: null,\n  isFetching: false,\n  errorMessage: undefined,\n};\n\nconst shopReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_COLLECTIONS_START:\n      return { ...state, isFetching: true };\n    case FETCH_COLLECTIONS_SUCCESS:\n      return { ...state, isFetching: false, collections: action.payload };\n    case FETCH_COLLECTIONS_FAILURE:\n      return { ...state, isFetching: false, errorMessage: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default shopReducer;\n"]},"metadata":{},"sourceType":"module"}