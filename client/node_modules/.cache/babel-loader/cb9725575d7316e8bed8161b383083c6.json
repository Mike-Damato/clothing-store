{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Desktop/Coding/React2020/clothing-store/client/src/components/StripeButton/StripeButton.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { clearCart } from '../../redux/cart/cartutils';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeButton = ({\n  price,\n  history,\n  cartItems\n}) => {\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_swgZVNKN4tyqgBXKrWl8R5HW000gFy8jra';\n\n  const onToken = async token => {\n    try {\n      await axios({\n        url: 'payment',\n        method: 'post',\n        data: {\n          amount: priceForStripe,\n          token\n        }\n      });\n      alert('Payment successful!');\n      console.log('CARTITEMS', cartItems);\n      history.push('/thankyou');\n    } catch (error) {\n      console.error('Payment error: ', error);\n      clearCart(cartItems);\n      alert('There was an issue with your payment.');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StripeCheckout, {\n    label: \"Pay Now\",\n    name: \"CRSP Clothing Ltd.\",\n    billingAddress: true,\n    shippingAddress: true,\n    image: \"https://sendeyo.com/up/d/f3eb2117da\",\n    description: `Your total is $${price}`,\n    amount: priceForStripe,\n    panelLabel: \"Pay Now\",\n    token: onToken,\n    stripeKey: publishableKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearCart: cartItems => dispatch(clearCart(cartItems))\n});\n\nexport default withRouter(connect(null, mapDispatchToProps)(StripeButton));","map":{"version":3,"sources":["/Users/mike/Desktop/Coding/React2020/clothing-store/client/src/components/StripeButton/StripeButton.js"],"names":["React","withRouter","connect","clearCart","StripeCheckout","axios","StripeButton","price","history","cartItems","priceForStripe","publishableKey","onToken","token","url","method","data","amount","alert","console","log","push","error","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAAmC;AACtD,QAAMC,cAAc,GAAGH,KAAK,GAAG,GAA/B;AACA,QAAMI,cAAc,GAAG,4CAAvB;;AAEA,QAAMC,OAAO,GAAG,MAAOC,KAAP,IAAiB;AAC/B,QAAI;AACF,YAAMR,KAAK,CAAC;AACVS,QAAAA,GAAG,EAAE,SADK;AAEVC,QAAAA,MAAM,EAAE,MAFE;AAGVC,QAAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAEP,cADJ;AAEJG,UAAAA;AAFI;AAHI,OAAD,CAAX;AAQAK,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBX,SAAzB;AACAD,MAAAA,OAAO,CAACa,IAAR,CAAa,WAAb;AACD,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdH,MAAAA,OAAO,CAACG,KAAR,CAAc,iBAAd,EAAiCA,KAAjC;AACAnB,MAAAA,SAAS,CAACM,SAAD,CAAT;AACAS,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACD;AACF,GAlBD;;AAoBA,sBACE,oBAAC,cAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,IAAI,EAAC,oBAFP;AAGE,IAAA,cAAc,MAHhB;AAIE,IAAA,eAAe,MAJjB;AAKE,IAAA,KAAK,EAAC,qCALR;AAME,IAAA,WAAW,EAAG,kBAAiBX,KAAM,EANvC;AAOE,IAAA,MAAM,EAAEG,cAPV;AAQE,IAAA,UAAU,EAAC,SARb;AASE,IAAA,KAAK,EAAEE,OATT;AAUE,IAAA,SAAS,EAAED,cAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcD,CAtCD;;AAwCA,MAAMY,kBAAkB,GAAIC,QAAD,KAAe;AACxCrB,EAAAA,SAAS,EAAGM,SAAD,IAAee,QAAQ,CAACrB,SAAS,CAACM,SAAD,CAAV;AADM,CAAf,CAA3B;;AAIA,eAAeR,UAAU,CAACC,OAAO,CAAC,IAAD,EAAOqB,kBAAP,CAAP,CAAkCjB,YAAlC,CAAD,CAAzB","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { clearCart } from '../../redux/cart/cartutils';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeButton = ({ price, history, cartItems }) => {\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_swgZVNKN4tyqgBXKrWl8R5HW000gFy8jra';\n\n  const onToken = async (token) => {\n    try {\n      await axios({\n        url: 'payment',\n        method: 'post',\n        data: {\n          amount: priceForStripe,\n          token,\n        },\n      });\n      alert('Payment successful!');\n      console.log('CARTITEMS', cartItems);\n      history.push('/thankyou');\n    } catch (error) {\n      console.error('Payment error: ', error);\n      clearCart(cartItems);\n      alert('There was an issue with your payment.');\n    }\n  };\n\n  return (\n    <StripeCheckout\n      label=\"Pay Now\"\n      name=\"CRSP Clothing Ltd.\"\n      billingAddress\n      shippingAddress\n      image=\"https://sendeyo.com/up/d/f3eb2117da\"\n      description={`Your total is $${price}`}\n      amount={priceForStripe}\n      panelLabel=\"Pay Now\"\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearCart: (cartItems) => dispatch(clearCart(cartItems)),\n});\n\nexport default withRouter(connect(null, mapDispatchToProps)(StripeButton));\n"]},"metadata":{},"sourceType":"module"}